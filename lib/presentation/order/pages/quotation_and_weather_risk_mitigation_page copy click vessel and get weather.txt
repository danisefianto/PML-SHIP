import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:pml_ship/core/components/buttons.dart';
import 'package:pml_ship/data/models/request/quotation_request_model.dart';
import 'package:pml_ship/data/models/request/weather_request_model.dart';
import 'package:pml_ship/presentation/order/bloc/checkQuotation/check_quotation_bloc.dart';
import 'package:pml_ship/presentation/order/bloc/weather/weather_bloc.dart';
import 'package:pml_ship/presentation/order/pages/add_shipper_consignee_data_page.dart';

// Define a model class to hold the selected route data
class SelectedRouteData {
  final String vesselId;
  final String portOfLoadingName;
  final String portOfDischargeName;
  final String portOfLoadingLatitude;
  final String portOfLoadingLongitude;
  final String portOfDischargeLatitude;
  final String portOfDischargeLongitude;
  final String dateOfLoading;
  final String estimatedDateOfDischarge;

  SelectedRouteData({
    required this.portOfLoadingName,
    required this.portOfDischargeName,
    required this.vesselId,
    required this.portOfLoadingLatitude,
    required this.portOfLoadingLongitude,
    required this.portOfDischargeLatitude,
    required this.portOfDischargeLongitude,
    required this.dateOfLoading,
    required this.estimatedDateOfDischarge,
  });
}

class QuotationAndWeatherRiskMitigationPage extends StatefulWidget {
  final String transactionIdMessage;

  const QuotationAndWeatherRiskMitigationPage({
    super.key,
    required this.transactionIdMessage,
  });

  @override
  State<QuotationAndWeatherRiskMitigationPage> createState() =>
      _QuotationAndWeatherRiskMitigationPageState();
}

class _QuotationAndWeatherRiskMitigationPageState
    extends State<QuotationAndWeatherRiskMitigationPage> {
  late SelectedRouteData selectedRouteData;

  @override
  void initState() {
    super.initState();
    selectedRouteData = SelectedRouteData(
      vesselId: '',
      portOfLoadingName: '',
      portOfDischargeName: '',
      portOfLoadingLatitude: '',
      portOfLoadingLongitude: '',
      portOfDischargeLatitude: '',
      portOfDischargeLongitude: '',
      dateOfLoading: '',
      estimatedDateOfDischarge: '',
    );
    context.read<CheckQuotationBloc>().add(
          CheckQuotationEvent.checkQuotation(
            QuotationRequestModel(transactionId: widget.transactionIdMessage),
          ),
        );
  }

  @override
  Widget build(BuildContext context) {
    Widget weatherDataInPort(String portName, String date) {
      return Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Text('Pelabuhan $portName'),
              Text('Tgl $date'),
            ],
          ),
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Image.asset(
                '/weather_icons/id/am/cerah-am.webp',
                height: 50,
              ),
              const Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('Mostly Sunny'),
                  Text('Suhu: 32 C'),
                  Text('Wind speed min: 18 km/h'),
                  Text('Wind speed max: 18 km/h'),
                  Text('Wind Direction From: North'),
                ],
              ),
            ],
          ),
        ],
      );
    }

    return SafeArea(
      child: Scaffold(
        body: NestedScrollView(
          headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
            return <Widget>[
              SliverAppBar(
                title: const Text('Quotation'),
                leading: IconButton(
                  icon: const Icon(Icons.chevron_left),
                  onPressed: () {
                    Navigator.pop(context);
                  },
                ),
                pinned: true,
                floating: true,
                forceElevated: innerBoxIsScrolled,
              ),
            ];
          },
          body: BlocBuilder<CheckQuotationBloc, CheckQuotationState>(
            builder: (context, state) {
              return state.maybeWhen(
                error: (message) {
                  return Center(
                    child: Text('Error: $message',
                        style: const TextStyle(color: Colors.red)),
                  );
                },
                loading: () {
                  return const Center(child: CircularProgressIndicator());
                },
                success: (routes) {
                  return ListView.separated(
                    padding: const EdgeInsets.symmetric(
                        vertical: 50.0, horizontal: 24.0),
                    separatorBuilder: (context, index) =>
                        const SizedBox(height: 16),
                    itemCount: routes.data.length,
                    itemBuilder: (context, index) {
                      InkWell(
                        onTap: () {
                          // Handle item tap
                          final selectedRoute = routes.data[index];
                          final request = WeatherRequestModel(
                            latitude: selectedRoute.portOfLoadingLatitude,
                            longitude: selectedRoute.portOfLoadingLongitude,
                            startDate: DateFormat('yyyy-MM-dd')
                                .format(selectedRoute.dateOfLoading),
                            endDate: DateFormat('yyyy-MM-dd')
                                .format(selectedRoute.dateOfLoading),
                          );
                          context
                              .read<WeatherBloc>()
                              .add(WeatherEvent.fetchWeather(request));

                          setState(() {
                            selectedRouteData = SelectedRouteData(
                              vesselId: selectedRoute.vesselId.toString(),
                              portOfLoadingName:
                                  selectedRoute.portOfLoadingName,
                              portOfDischargeName:
                                  selectedRoute.portOfDischargeName,
                              portOfLoadingLatitude:
                                  selectedRoute.portOfLoadingLatitude,
                              portOfLoadingLongitude:
                                  selectedRoute.portOfLoadingLongitude,
                              portOfDischargeLatitude:
                                  selectedRoute.portOfDischargeLatitude,
                              portOfDischargeLongitude:
                                  selectedRoute.portOfDischargeLongitude,
                              dateOfLoading: DateFormat('yyyy-MM-dd')
                                  .format(selectedRoute.dateOfLoading),
                              estimatedDateOfDischarge: DateFormat('yyyy-MM-dd')
                                  .format(
                                      selectedRoute.estimatedDateOfDischarge),
                            );
                          });
                        },
                        child: BlocListener<WeatherBloc, WeatherState>(
                          listener: (context, state) {
                            state.maybeWhen(
                              loading: () {
                                return const Center(
                                    child: CircularProgressIndicator());
                              },
                              error: (message) {
                                ScaffoldMessenger.of(context)
                                    .showSnackBar(SnackBar(
                                  content: Text('Error: $message'),
                                  backgroundColor: Colors.red,
                                ));
                              },
                              orElse: () {},
                            );
                          },
                          child: Container(
                            padding: const EdgeInsets.all(16.0),
                            decoration: ShapeDecoration(
                              color: Colors.white,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                                side: const BorderSide(
                                    color: Colors.grey, width: 1),
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  routes.data[index].vesselName,
                                  style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                                Text(
                                  '${routes.data[index].portOfLoadingName} - ${routes.data[index].portOfDischargeName}',
                                  style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                                Text(
                                  'Estimasi perjalanan: ${routes.data[index].estimatedDay} hari',
                                  style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                                Text(
                                  'Estimasi biaya: ${NumberFormat.currency(locale: 'id_ID', symbol: 'Rp').format(routes.data[index].estimatedCost)}',
                                  style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      );
                    },
                  );
                },
                orElse: () {
                  return const Center(child: Text('No data available'));
                },
              );
            },
          ),
        ),
        bottomNavigationBar: Column(
          children: [
            BlocBuilder<WeatherBloc, WeatherState>(
              builder: (context, state) {
                return state.maybeWhen(
                  orElse: {},
                  loading: () {
                    return const Center(child: CircularProgressIndicator());
                  },
                  success: (weather) {
                    return Column(
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: [
                            Text(
                                'Pelabuhan ${selectedRouteData.portOfDischargeName}'),
                            Text('Tgl ${selectedRouteData.dateOfLoading}'),
                          ],
                        ),
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: [
                            Image.asset(
                              '/weather_icons/id/am/cerah-am.webp',
                              height: 50,
                            ),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text('${weather.daily.weatherCode}'),
                                Text('Suhu: 32 C'),
                                Text('Wind speed min: 18 km/h'),
                                Text('Wind speed max: 18 km/h'),
                                Text('Wind Direction From: North'),
                              ],
                            ),
                          ],
                        ),
                      ],
                    );
                  },
                );
              },
            ),
            Padding(
              padding: const EdgeInsets.all(30.0),
              child: Button.outlined(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AddShipperConsigneeDataPage(
                        transactionIdMessage: widget.transactionIdMessage,
                      ),
                    ),
                  );
                },
                label: 'Next',
              ),
            ),
          ],
        ),
      ),
    );
  }
}
